name: Build

on:
  push:
    branches: main
  pull_request:
    branches: '*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install node
      uses: actions/setup-node@v1
      with:
       node-version: '14.x'

    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: 'x64'

    - name: Setup pip cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: pip-3.8-${{ hashFiles('package.json') }}
        restore-keys: |
          pip-3.8-
          pip-

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Setup yarn cache
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          yarn-

    - name: Setup OpenCascade build cache
      uses: actions/cache@v2
      with:
        path: |
          src/worker/opencascade/jupytercad.opencascade.js
          src/worker/opencascade/jupytercad.opencascade.wasm
          src/worker/opencascade/jupytercad.opencascade.d.ts
          src/worker/opencascade/jupytercad.opencascade.version
        key: ${{ hashFiles('src/worker/opencascade/build.yml') }}

    - name: Install dependencies
      run: python -m pip install -U "jupyterlab>=4.0.0a25"

    - name: Build the extension
      run: |
        set -eux
        jlpm
        jlpm run eslint:check
        python -m pip install . -vvv

        jupyter labextension list 2>&1 | grep -ie "jupytercad.*OK"
        
        # TODO Enable browser check when upstream is fixed
        # python -m jupyterlab.browser_check

        pip install build
        python -m build --wheel
        cp dist/*.whl .
        pip uninstall -y "jupytercad" jupyterlab
        rm -rf myextension

    - uses: actions/upload-artifact@v2
      with:
        name: myextension-whl
        path: "*.whl"

  test_integration:
    name: Integration tests
    needs: build
    runs-on: ubuntu-latest
    env:
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/pw-browsers

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup mamba
      uses: conda-incubator/setup-miniconda@v2
      with:
        mamba-version: "*"
        channels: conda-forge

    - name: Create the conda environment
      shell: bash -l {0}
      run: mamba install -q python=3.9 pip freecad

    - name: Download extension package
      uses: actions/download-artifact@v3
      with:
        name: myextension-whl

    - name: Install the extension
      shell: bash -l {0}
      run: |
        whereis python
        python -m pip install --find-links=. jupytercad
        python -m pip install "jupyterlab>=4.0.0a25"

    - name: Install dependencies
      shell: bash -l {0}
      working-directory: ui-tests
      env:
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      run: jlpm install

    - name: Set up browser cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/pw-browsers
        key: ${{ runner.os }}-${{ hashFiles('ui-tests/yarn.lock') }}

    - name: Install browser
      shell: bash -l {0}
      run: jlpm playwright install chromium
      working-directory: ui-tests

    - name: Execute integration tests
      shell: bash -l {0}
      working-directory: ui-tests
      run: |
        jlpm playwright test

    - name: Upload Playwright Test report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: jupytercad-playwright-tests
        path: |
          ui-tests/test-results
          ui-tests/playwright-report

  test_isolated:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: 'x64'

    - uses: actions/download-artifact@v2
      with:
        name: myextension-whl

    - name: Install and Test
      run: |
        set -eux
        # Remove NodeJS, twice to take care of system and locally installed node versions.
        sudo rm -rf $(which node)
        sudo rm -rf $(which node)
        pip install --find-links=. jupytercad
        pip install "jupyterlab>=4.0.0a25"
        jupyter labextension list 2>&1 | grep -ie "jupytercad.*OK"
